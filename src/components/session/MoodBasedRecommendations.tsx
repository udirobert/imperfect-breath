/**\n * Mood-Based Recommendations - User-Driven Pattern Selection\n * \n * ENHANCEMENT: Improves recommendation accuracy through user input\n * UX: Simple, intuitive mood selection for better pattern matching\n * CLEAN: Compact design that fits naturally in the session flow\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Zap,\n  Heart,\n  Moon,\n  Focus,\n  Coffee,\n  Frown,\n  Smile,\n  Battery,\n  Brain,\n  Bed,\n  ChevronRight,\n  Sparkles\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { SmartPatternRecommendations, type RecommendationContext } from \"@/lib/recommendations/SmartPatternRecommendations\";\n\ninterface MoodOption {\n  id: string;\n  label: string;\n  icon: React.ComponentType<{ className?: string }>;\n  color: string;\n  description: string;\n  goal: \"stress\" | \"energy\" | \"sleep\" | \"focus\" | \"general\";\n  mood: \"stressed\" | \"tired\" | \"anxious\" | \"energetic\" | \"calm\";\n}\n\nconst MOOD_OPTIONS: MoodOption[] = [\n  {\n    id: \"stressed\",\n    label: \"Stressed\",\n    icon: Frown,\n    color: \"bg-red-500\",\n    description: \"Need to calm down\",\n    goal: \"stress\",\n    mood: \"stressed\"\n  },\n  {\n    id: \"tired\",\n    label: \"Tired\",\n    icon: Battery,\n    color: \"bg-orange-500\",\n    description: \"Need energy boost\",\n    goal: \"energy\",\n    mood: \"tired\"\n  },\n  {\n    id: \"anxious\",\n    label: \"Anxious\",\n    icon: Heart,\n    color: \"bg-purple-500\",\n    description: \"Need to relax\",\n    goal: \"stress\",\n    mood: \"anxious\"\n  },\n  {\n    id: \"unfocused\",\n    label: \"Unfocused\",\n    icon: Brain,\n    color: \"bg-blue-500\",\n    description: \"Need mental clarity\",\n    goal: \"focus\",\n    mood: \"stressed\"\n  },\n  {\n    id: \"restless\",\n    label: \"Restless\",\n    icon: Zap,\n    color: \"bg-yellow-500\",\n    description: \"Need to wind down\",\n    goal: \"sleep\",\n    mood: \"anxious\"\n  },\n  {\n    id: \"good\",\n    label: \"Good\",\n    icon: Smile,\n    color: \"bg-green-500\",\n    description: \"General wellness\",\n    goal: \"general\",\n    mood: \"calm\"\n  }\n];\n\ninterface MoodBasedRecommendationsProps {\n  onRecommendationsUpdate: (recommendations: any[]) => void;\n  className?: string;\n  variant?: \"compact\" | \"full\";\n}\n\nexport const MoodBasedRecommendations: React.FC<MoodBasedRecommendationsProps> = ({\n  onRecommendationsUpdate,\n  className,\n  variant = \"compact\"\n}) => {\n  const [selectedMood, setSelectedMood] = useState<string | null>(null);\n  const [recommendations, setRecommendations] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Get time-based greeting\n  const getTimeGreeting = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return \"Good morning\";\n    if (hour < 17) return \"Good afternoon\";\n    if (hour < 21) return \"Good evening\";\n    return \"Good night\";\n  };\n\n  // Handle mood selection\n  const handleMoodSelect = async (moodOption: MoodOption) => {\n    setSelectedMood(moodOption.id);\n    setIsLoading(true);\n\n    try {\n      // Create recommendation context based on user's mood\n      const context: RecommendationContext = {\n        timeOfDay: new Date().getHours(),\n        userGoal: moodOption.goal,\n        currentMood: moodOption.mood,\n        userLevel: \"beginner\", // Could be made dynamic\n        sessionType: \"classic\"\n      };\n\n      // Get personalized recommendations\n      const newRecommendations = SmartPatternRecommendations.getRecommendations(context);\n      \n      // Add match percentages for display\n      const enhancedRecommendations = newRecommendations.map((rec, index) => ({\n        ...rec,\n        matchPercentage: Math.round((rec.confidence * 100) - (index * 5)), // Slight decrease for ranking\n        explanation: `${rec.reason} • ${rec.timeToEffect} to effect`,\n        badge: index === 0 ? \"optimal time\" : `${Math.round((rec.confidence * 100) - (index * 5))}% match`\n      }));\n\n      setRecommendations(enhancedRecommendations);\n      onRecommendationsUpdate(enhancedRecommendations);\n    } catch (error) {\n      console.error(\"Failed to get recommendations:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Reset selection\n  const handleReset = () => {\n    setSelectedMood(null);\n    setRecommendations([]);\n    onRecommendationsUpdate([]);\n  };\n\n  if (variant === \"compact\") {\n    return (\n      <div className={cn(\"space-y-3\", className)}>\n        {/* Compact Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground\">\n            {getTimeGreeting()}! How are you feeling?\n          </div>\n          {selectedMood && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleReset}\n              className=\"text-xs h-6 px-2\"\n            >\n              Change\n            </Button>\n          )}\n        </div>\n\n        {/* Mood Selection - Compact */}\n        {!selectedMood ? (\n          <div className=\"flex flex-wrap gap-2\">\n            {MOOD_OPTIONS.map((mood) => {\n              const Icon = mood.icon;\n              return (\n                <Button\n                  key={mood.id}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleMoodSelect(mood)}\n                  className=\"flex items-center gap-1 h-8 px-3 text-xs\"\n                  disabled={isLoading}\n                >\n                  <div className={cn(\n                    \"w-3 h-3 rounded-full flex items-center justify-center text-white\",\n                    mood.color\n                  )}>\n                    <Icon className=\"h-2 w-2\" />\n                  </div>\n                  {mood.label}\n                </Button>\n              );\n            })}\n          </div>\n        ) : (\n          /* Selected Mood Display */\n          <div className=\"flex items-center gap-2 p-2 bg-muted/50 rounded-lg\">\n            {(() => {\n              const selectedMoodOption = MOOD_OPTIONS.find(m => m.id === selectedMood);\n              if (!selectedMoodOption) return null;\n              const Icon = selectedMoodOption.icon;\n              return (\n                <>\n                  <div className={cn(\n                    \"w-4 h-4 rounded-full flex items-center justify-center text-white\",\n                    selectedMoodOption.color\n                  )}>\n                    <Icon className=\"h-2.5 w-2.5\" />\n                  </div>\n                  <span className=\"text-sm font-medium\">{selectedMoodOption.label}</span>\n                  <span className=\"text-xs text-muted-foreground\">• {selectedMoodOption.description}</span>\n                  {recommendations.length > 0 && (\n                    <Badge variant=\"secondary\" className=\"text-xs ml-auto\">\n                      <Sparkles className=\"h-2.5 w-2.5 mr-1\" />\n                      {recommendations.length} matches\n                    </Badge>\n                  )}\n                </>\n              );\n            })()}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // Full variant\n  return (\n    <Card className={cn(\"w-full\", className)}>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          {/* Header */}\n          <div className=\"text-center space-y-2\">\n            <h3 className=\"text-lg font-semibold\">\n              {getTimeGreeting()}! How are you feeling?\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Tell us how you're feeling to get personalized breathing recommendations\n            </p>\n          </div>\n\n          {/* Mood Selection Grid */}\n          {!selectedMood ? (\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n              {MOOD_OPTIONS.map((mood) => {\n                const Icon = mood.icon;\n                return (\n                  <Button\n                    key={mood.id}\n                    variant=\"outline\"\n                    onClick={() => handleMoodSelect(mood)}\n                    className=\"h-auto p-4 flex flex-col items-center gap-2 hover:bg-muted/50\"\n                    disabled={isLoading}\n                  >\n                    <div className={cn(\n                      \"w-8 h-8 rounded-full flex items-center justify-center text-white\",\n                      mood.color\n                    )}>\n                      <Icon className=\"h-4 w-4\" />\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"font-medium text-sm\">{mood.label}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {mood.description}\n                      </div>\n                    </div>\n                  </Button>\n                );\n              })}\n            </div>\n          ) : (\n            /* Selected Mood and Recommendations */\n            <div className=\"space-y-4\">\n              {/* Selected Mood Display */}\n              <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  {(() => {\n                    const selectedMoodOption = MOOD_OPTIONS.find(m => m.id === selectedMood);\n                    if (!selectedMoodOption) return null;\n                    const Icon = selectedMoodOption.icon;\n                    return (\n                      <>\n                        <div className={cn(\n                          \"w-8 h-8 rounded-full flex items-center justify-center text-white\",\n                          selectedMoodOption.color\n                        )}>\n                          <Icon className=\"h-4 w-4\" />\n                        </div>\n                        <div>\n                          <div className=\"font-medium\">{selectedMoodOption.label}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {selectedMoodOption.description}\n                          </div>\n                        </div>\n                      </>\n                    );\n                  })()}\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleReset}\n                  className=\"text-sm\"\n                >\n                  Change\n                </Button>\n              </div>\n\n              {/* Recommendations */}\n              {isLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2\" />\n                  <p className=\"text-sm text-muted-foreground\">Finding perfect patterns...</p>\n                </div>\n              ) : recommendations.length > 0 ? (\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <Sparkles className=\"h-4 w-4 text-primary\" />\n                    <span className=\"font-medium\">Recommended for you</span>\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {recommendations.length} matches\n                    </Badge>\n                  </div>\n                  <div className=\"grid gap-3\">\n                    {recommendations.map((rec, index) => (\n                      <div\n                        key={rec.patternId}\n                        className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50 transition-colors\"\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <span className=\"font-medium\">{rec.pattern.name}</span>\n                            <Badge \n                              variant={index === 0 ? \"default\" : \"secondary\"} \n                              className=\"text-xs\"\n                            >\n                              {rec.badge}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {rec.explanation}\n                          </p>\n                        </div>\n                        <ChevronRight className=\"h-4 w-4 text-muted-foreground\" />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ) : null}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default MoodBasedRecommendations;"