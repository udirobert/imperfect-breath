/**\n * Improved Wallet Manager - Clean, Responsive, Mobile-Optimized\n * \n * CLEAN: Better visual hierarchy and spacing\n * RESPONSIVE: Mobile-first design with proper text handling\n * UX: Clear status indicators and improved interactions\n * PERFORMANT: Efficient state management and loading states\n */\n\nimport { useEffect, useState } from \"react\";\nimport { useFlow } from \"../../hooks/useFlow\";\nimport { useLens } from \"../../hooks/useLens\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport { Button } from \"../ui/button\";\nimport { Badge } from \"../ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"../ui/avatar\";\nimport { Card, CardContent } from \"../ui/card\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"../ui/dropdown-menu\";\nimport {\n  Wallet,\n  Users,\n  LogOut,\n  CheckCircle,\n  AlertCircle,\n  Copy,\n  ExternalLink,\n  Loader2,\n  ChevronDown,\n  Coins,\n  Zap\n} from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { ImprovedWalletConnection } from \"./ImprovedWalletConnection\";\nimport { cn } from \"@/lib/utils\";\n\ninterface WalletStatusProps {\n  isConnected: boolean;\n  isLoading?: boolean;\n  address?: string;\n  displayName?: string;\n  icon: React.ReactNode;\n  color: string;\n  onConnect: () => void;\n  onDisconnect: () => void;\n  children?: React.ReactNode;\n}\n\nconst WalletStatusCard: React.FC<WalletStatusProps> = ({\n  isConnected,\n  isLoading,\n  address,\n  displayName,\n  icon,\n  color,\n  onConnect,\n  onDisconnect,\n  children\n}) => {\n  const formatAddress = (addr: string) => `${addr.slice(0, 6)}...${addr.slice(-4)}`;\n  \n  if (!isConnected) {\n    return (\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={onConnect}\n        disabled={isLoading}\n        className=\"flex items-center gap-2 min-w-[120px]\"\n      >\n        {isLoading ? (\n          <Loader2 className=\"h-4 w-4 animate-spin\" />\n        ) : (\n          icon\n        )}\n        <span className=\"truncate\">{displayName}</span>\n      </Button>\n    );\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"flex items-center gap-2 min-w-[120px] max-w-[160px]\"\n        >\n          <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n            <div className={cn(\n              \"w-5 h-5 rounded-full flex items-center justify-center text-white text-xs\",\n              color\n            )}>\n              {icon}\n            </div>\n            <span className=\"truncate text-sm\">\n              {address ? formatAddress(address) : displayName}\n            </span>\n            <CheckCircle className=\"h-3 w-3 text-green-500 flex-shrink-0\" />\n          </div>\n          <ChevronDown className=\"h-3 w-3 flex-shrink-0\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-64\">\n        {children}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nexport const ImprovedWalletManager = () => {\n  const {\n    user: flowUser,\n    connect: flowLogIn,\n    disconnect: flowLogOut,\n    executeTransaction,\n  } = useFlow();\n\n  const {\n    isAuthenticated,\n    authenticate,\n    logout,\n    currentAccount: session,\n  } = useLens();\n\n  const { hasWallet, wallet, isWeb3User, currentChain, blockchainEnabled } = useAuth();\n\n  const [isFlowSetupLoading, setIsFlowSetupLoading] = useState(false);\n  const [isLensAuthenticating, setIsLensAuthenticating] = useState(false);\n  const [showWalletDialog, setShowWalletDialog] = useState(false);\n\n  // Flow account setup effect\n  useEffect(() => {\n    if (flowUser?.loggedIn && !isFlowSetupLoading) {\n      const setupFlowAccount = async () => {\n        try {\n          setIsFlowSetupLoading(true);\n          const txCode = `\n            import ImperfectBreath from 0xImperfectBreath\n            transaction {\n                prepare(signer: AuthAccount) {\n                    if signer.borrow<&BreathFlowVision.Collection>(from: BreathFlowVision.CollectionStoragePath) == nil {\n                        signer.save(<-BreathFlowVision.createEmptyCollection(), to: BreathFlowVision.CollectionStoragePath)\n                        signer.link<&BreathFlowVision.Collection{BreathFlowVision.CollectionPublic}>(\n                            BreathFlowVision.CollectionPublicPath,\n                            target: BreathFlowVision.CollectionStoragePath\n                        )\n                    }\n                }\n            }\n          `;\n          await executeTransaction(txCode);\n          toast.success(\"Flow account ready for breathing NFTs!\");\n        } catch (error) {\n          console.error(\"Failed to set up Flow account:\", error);\n        } finally {\n          setIsFlowSetupLoading(false);\n        }\n      };\n      setupFlowAccount();\n    }\n  }, [flowUser?.loggedIn, executeTransaction, isFlowSetupLoading]);\n\n  // Handlers\n  const handleLensDisconnect = async () => {\n    try {\n      await logout();\n      toast.success(\"Disconnected from Lens Protocol\");\n    } catch (error) {\n      toast.error(\"Failed to disconnect from Lens\");\n    }\n  };\n\n  const handleFlowDisconnect = async () => {\n    try {\n      await flowLogOut();\n      toast.success(\"Disconnected Flow wallet\");\n    } catch (error) {\n      toast.error(\"Failed to disconnect Flow wallet\");\n    }\n  };\n\n  const handleLensLogin = async () => {\n    try {\n      setIsLensAuthenticating(true);\n      await authenticate();\n      toast.success(\"Connected to Lens Protocol\");\n    } catch (error) {\n      toast.error(\"Failed to connect to Lens\");\n    } finally {\n      setIsLensAuthenticating(false);\n    }\n  };\n\n  const handleCopyAddress = async (address: string, label: string) => {\n    try {\n      await navigator.clipboard.writeText(address);\n      toast.success(`${label} address copied`);\n    } catch (error) {\n      toast.error(\"Failed to copy address\");\n    }\n  };\n\n  const getLensDisplayName = () => {\n    if (session?.address) return `${session.address.slice(0, 6)}...`;\n    return \"Lens Profile\";\n  };\n\n  const getFlowAddress = () => {\n    if (!flowUser?.addr) return \"\";\n    return `${flowUser.addr.slice(0, 6)}...${flowUser.addr.slice(-4)}`;\n  };\n\n  // Connection status summary\n  const getConnectionSummary = () => {\n    const connections = [];\n    if (hasWallet && currentChain) connections.push(currentChain);\n    if (flowUser?.loggedIn) connections.push(\"Flow\");\n    if (isAuthenticated) connections.push(\"Lens\");\n    return connections.join(\" + \") || \"Not Connected\";\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Main Wallet Connection */}\n      {blockchainEnabled && (\n        <div className=\"space-y-2\">\n          <div className=\"text-sm font-medium text-muted-foreground\">Primary Wallet</div>\n          {showWalletDialog ? (\n            <Card className=\"p-4\">\n              <ImprovedWalletConnection />\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => setShowWalletDialog(false)}\n                className=\"mt-2 w-full\"\n              >\n                Close\n              </Button>\n            </Card>\n          ) : (\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowWalletDialog(true)}\n              className=\"w-full justify-start\"\n            >\n              <Wallet className=\"h-4 w-4 mr-2\" />\n              {hasWallet ? \"Manage Wallet\" : \"Connect Wallet\"}\n            </Button>\n          )}\n        </div>\n      )}\n\n      {/* Protocol Connections */}\n      <div className=\"space-y-2\">\n        <div className=\"text-sm font-medium text-muted-foreground\">Protocol Connections</div>\n        <div className=\"flex flex-col gap-2\">\n          {/* Flow Wallet */}\n          <WalletStatusCard\n            isConnected={flowUser?.loggedIn || false}\n            isLoading={isFlowSetupLoading}\n            address={flowUser?.addr}\n            displayName=\"Flow (NFTs)\"\n            icon={<Coins className=\"h-3 w-3\" />}\n            color=\"bg-green-500\"\n            onConnect={flowLogIn}\n            onDisconnect={handleFlowDisconnect}\n          >\n            <DropdownMenuLabel className=\"text-xs text-muted-foreground\">\n              Flow Blockchain â€¢ NFT Features\n            </DropdownMenuLabel>\n            <DropdownMenuItem disabled className=\"flex flex-col items-start space-y-1\">\n              <span className=\"font-medium\">Connected</span>\n              <code className=\"text-xs text-muted-foreground font-mono\">\n                {getFlowAddress()}\n              </code>\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem\n              onClick={() => handleCopyAddress(flowUser?.addr || \"\", \"Flow\")}\n            >\n              <Copy className=\"w-4 h-4 mr-2\" />\n              Copy Address\n            </DropdownMenuItem>\n            <DropdownMenuItem className=\"text-blue-600\">\n              <Zap className=\"w-4 h-4 mr-2\" />\n              Mint Breathing NFTs\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem\n              onClick={handleFlowDisconnect}\n              className=\"text-red-600\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Disconnect\n            </DropdownMenuItem>\n          </WalletStatusCard>\n\n          {/* Lens Protocol */}\n          <WalletStatusCard\n            isConnected={isAuthenticated}\n            isLoading={isLensAuthenticating}\n            address={session?.address}\n            displayName=\"Lens (Social)\"\n            icon={<Users className=\"h-3 w-3\" />}\n            color=\"bg-purple-500\"\n            onConnect={handleLensLogin}\n            onDisconnect={handleLensDisconnect}\n          >\n            <DropdownMenuLabel className=\"text-xs text-muted-foreground\">\n              Lens Protocol â€¢ Social Features\n            </DropdownMenuLabel>\n            <DropdownMenuItem disabled className=\"flex flex-col items-start space-y-1\">\n              <span className=\"font-medium\">{getLensDisplayName()}</span>\n              <div className=\"flex items-center gap-2\">\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  Authenticated\n                </Badge>\n                {session?.address && (\n                  <code className=\"text-xs text-muted-foreground font-mono\">\n                    {session.address.slice(0, 10)}...\n                  </code>\n                )}\n              </div>\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            {session?.address && (\n              <DropdownMenuItem\n                onClick={() => handleCopyAddress(session.address, \"Lens\")}\n              >\n                <Copy className=\"w-4 h-4 mr-2\" />\n                Copy Address\n              </DropdownMenuItem>\n            )}\n            <DropdownMenuItem className=\"text-blue-600\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              Social Sharing\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem\n              onClick={handleLensDisconnect}\n              className=\"text-red-600\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Disconnect\n            </DropdownMenuItem>\n          </WalletStatusCard>\n        </div>\n      </div>\n\n      {/* Connection Status Summary */}\n      {(hasWallet || flowUser?.loggedIn || isAuthenticated) && (\n        <div className=\"pt-2 border-t\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-xs text-muted-foreground\">Status:</span>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {getConnectionSummary()}\n            </Badge>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};