name: Deploy Imperfect Breath

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  security-check:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security check
      run: |
        chmod +x scripts/security-check.sh
        ./scripts/security-check.sh

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: security-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint --if-present
      
    - name: Run type checking
      run: npm run type-check --if-present
      
    - name: Build frontend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: dist/
        retention-days: 7

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: security-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install backend dependencies
      run: |
        cd backend/vision-service
        pip install -r requirements.txt
        
    - name: Test backend imports
      run: |
        cd backend/vision-service
        python -c "import fastapi, uvicorn, cv2, mediapipe; print('‚úÖ All imports successful')"

  deploy-backend:
    name: Deploy Backend to Hetzner
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.HETZNER_SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.HETZNER_SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy vision service
      run: |
        cd backend/vision-service
        chmod +x deploy-hetzner.sh
        export HETZNER_SERVER_HOST="${{ secrets.HETZNER_SERVER_HOST }}"
        export HETZNER_SERVER_USER="${{ secrets.HETZNER_SERVER_USER }}"
        ./deploy-hetzner.sh
        
    - name: Configure firewall (if needed)
      run: |
        ssh ${{ secrets.HETZNER_SERVER_USER }}@${{ secrets.HETZNER_SERVER_HOST }} \
          "sudo ufw allow 8001/tcp || echo 'Port already allowed'"
        
    - name: Verify backend deployment
      run: |
        echo "Waiting for service to be ready..."
        sleep 45
        
        # Test health endpoint
        ssh ${{ secrets.HETZNER_SERVER_USER }}@${{ secrets.HETZNER_SERVER_HOST }} \
          "curl -f http://localhost:8001/health"
        
        echo "‚úÖ Backend deployment verified!"

  deploy-frontend:
    name: Deploy Frontend to Netlify
    runs-on: ubuntu-latest
    needs: [test-frontend, deploy-backend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: dist/
        
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Test backend health
      run: |
        # Test if backend is accessible (may fail due to firewall)
        curl -f http://${{ secrets.HETZNER_SERVER_HOST }}:8001/health || \
        echo "‚ö†Ô∏è External access blocked - this is expected if cloud firewall is not configured"
        
    - name: Test internal backend health
      run: |
        ssh ${{ secrets.HETZNER_SERVER_USER }}@${{ secrets.HETZNER_SERVER_HOST }} \
          "curl -f http://localhost:8001/health"
        echo "‚úÖ Internal backend health check passed"

  notify-completion:
    name: Notify Deployment Completion
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, integration-test]
    if: always()
    
    steps:
    - name: Deployment Summary
      run: |
        echo "üöÄ Deployment Summary:"
        echo "Backend: ${{ needs.deploy-backend.result }}"
        echo "Frontend: ${{ needs.deploy-frontend.result }}"
        echo "Integration Tests: ${{ needs.integration-test.result }}"
        
        if [[ "${{ needs.deploy-backend.result }}" == "success" && "${{ needs.deploy-frontend.result }}" == "success" ]]; then
          echo "‚úÖ Full stack deployment completed successfully!"
          echo "üîó Backend: http://${{ secrets.HETZNER_SERVER_HOST }}:8001"
          echo "üîó Frontend: Check Netlify deployment URL"
        else
          echo "‚ùå Some deployments failed. Check the logs above."
        fi